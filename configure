##########################################################################
# Copyright Â© 2011-2012 Vincent Prat & Simon Nicolas
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
##########################################################################

#!/bin/sh

# Initializing some options
debug="false"
prefix="/usr"
system_install="true"
sysconfdir="/etc"

# Reading options
supported_short_options="ghu"
supported_long_options="help,debug,prefix:,user,build:,includedir:,mandir:,libdir:,infodir:,sysconfdir:,localstatedir:,libexecdir:,disable-maintainer-mode,disable-dependency-tracking"

options=$(getopt -s sh -l $supported_long_options $supported_short_options $@)
if [ $? -eq 1 ]   # unsupported options
then
    echo "Try the --help option for more information"
    exit 1
fi

# initialization
arg=0
for opt in $options
do
    if [ $arg -eq 0 -o "$opt" = "--" ]
    then
        case $opt in
            -g | --debug)   debug="true";;
            -h | --help)    echo -e "Usage: configure [options]\n\nGeneral options:\n -g, --debug\tEnable debugging\n -h, --help\tDisplay this usage guide\n -u, --user\tInstall in a user scope\n\nDirectory options:\n --prefix=[/usr]\t\tInstallation directory\n --mandir=[<prefix>/share/man]\tManual directory\n --sysconfdir=[/etc]\t\tSystem configuration directory"
                exit 0;;
            -u | --user)    system_install="false"
                            config_path="$HOME/.config/gm-assistant";;
            --prefix)       arg=1;;
            --sysconfdir)   arg=2;;
            --mandir)       arg=3;;
            --) break;;
        esac
    else
        case $arg in
            1)  prefix=$(echo $opt | tr -d "'");;
            2)  sysconfdir=$(echo $opt | tr -d "'");;
            3)  mandir=$(echo $opt | tr -d "'");;
        esac
        arg=0
    fi
done

# Setting paths
mandir=$prefix"/share/man"
if [ $system_install = "true" ]
then
    config_path="$sysconfdir/xdg/gm-assistant"
fi

conf_file="gm-assistant.conf"

# Find the OS
OS=$(uname)
echo "******************************"
echo "* Detecting operating system *"
echo "******************************"
echo
echo Operating system: $OS
# OS-dependent variables
if [ $OS = "Linux" ]
then
	inc_path="/usr/include/"
    sed_i="-i"
elif [ $OS = "Darwin" ]
then
	inc_path="/opt/local/include/"
    sed_i='-i ""'
fi

echo
echo "*************************"
echo "* Checking softwares... *"
echo "*************************" 
echo

# Needed softwares
softs="uname echo getopt ls grep head pkg-config qmake lupdate lrelease make sed install tr rsvg-convert convert"

for soft in $softs
do
    path=$(which $soft)
    if [ $? = 1 ]
    then
        echo $soft missing !
        exit 1
    else
        echo $soft: $path        
    fi
done
echo 

echo "*********************************"
echo "* Checking development files... *"
echo "*********************************"

# Needed headers

# libXML++
echo
echo libXML++:
xml_devs="libxml++"
xml_dev_path=$(ls -l $inc_path | grep -o -e "libxml++-2\.[0-9]\{1,\}" | head -n 1)

for dev in $xml_devs
do
    if [ -e "$inc_path$xml_dev_path/libxml++/$dev.h" ]
    then
        echo $inc_path$xml_dev_path/libxml++/$dev.h: OK
    else
        echo $dev.h missing !
        exit
    fi
done

# SDL
echo
echo SDL:
sdl_devs="SDL_mixer SDL_sound"
sdl_dev_path=$inc_path"SDL"

for dev in $sdl_devs
do
    if [ -e "$sdl_dev_path/$dev.h" ]
    then
        echo $sdl_dev_path/$dev.h: OK
    else
        echo $dev.h missing !
        exit
    fi
done

echo
echo "********************************"
echo "* Preparing the compilation... *"
echo "********************************"
echo

target="gm-assistant"
pro_file=$target.pro

qmake -project -o $pro_file
lupdate $pro_file
lrelease $pro_file
qmake $pro_file

# adding the -g flag if the debug option is enabled
if [ $debug = "true" ]
then
    sed $sed_i "s#-pipe#-pipe -g#" Makefile
fi

echo
echo "************************"
echo "* Adding librairies... *"
echo "************************"
echo

echo $xml_dev_path
echo SDL
echo SDL_mixer
echo SDL_sound

# adding libxml++ and SDL includes in the Makefile
sed $sed_i "s#-I\.#$(pkg-config $xml_dev_path --cflags-only-I) $(pkg-config sdl --cflags-only-I)#" Makefile

# adding libxml++ and SDL binaries
sed $sed_i "s#-lQtCore#-lQtCore $(pkg-config $xml_dev_path --libs) -lSDL_mixer -lSDL_sound#" Makefile

# cleaning previous compilation
make -s clean
rm -f *.o
rm -f ui_*.h

# add files to clean
sed $sed_i 's#DEL_FILE) $(OBJECTS)#DEL_FILE) $(OBJECTS)\n\t-$(DEL_FILE) GMA.*#' Makefile
sed $sed_i 's#DEL_FILE) Makefile#DEL_FILE) Makefile\n\t-$(DEL_FILE) translations/*.qm\n\t-$(DEL_FILE) '$pro_file'\n\t-$(DEL_FILE) '$conf_file'#' Makefile

# preparing conf file
echo "[directories]" > $conf_file
echo "install=$prefix/share/gm-assistant" >> $conf_file

# preparing the installation
if [ $system_install = "true" ]
then
    sed $sed_i 's#-o main.o#-DSYSTEM_INSTALL -o main.o#' Makefile
fi

# preparing the icon
sed $sed_i 's#Makefile $(TARGET)#Makefile $(TARGET) GMA.xpm\n\nGMA.xpm: GMA.png\n\tconvert -resize 32x32 $< $@\n\nGMA.png: data/images/GMA.svg\n\trsvg-convert $< -o $@#' Makefile

sed $sed_i 's#^install:.*#BASEDIR=$(DESTDIR)'$prefix'\nBINS=$(BASEDIR)/games\nSHARE=$(BASEDIR)/share/gm-assistant\nTRANSLATIONS=$(SHARE)/translations\nMANDIR=$(DESTDIR)'$mandir/man6'\nCONF=$(DESTDIR)'$config_path'\n\ninstall:\n\t\install -d $(BASEDIR) $(BINS) $(TRANSLATIONS) $(MANDIR) $(CONF)\n\t$(INSTALL_PROGRAM) gm-assistant $(BINS)\n\t$(INSTALL_FILE) GMA.xpm $(SHARE)\n\t$(INSTALL_FILE) translations/*.qm $(TRANSLATIONS)\n\t$(INSTALL_FILE) doc/gm-assistant.6 $(MANDIR)\n\t$(INSTALL_FILE) '$conf_file' $(CONF)#' Makefile

# preparing the uninstallation
sed $sed_i 's#^uninstall:.*#uninstall:\n\t$(DEL_FILE) $(BINS)/gm-assistant\n\t$(DEL_FILE) $(TRANSLATIONS)/*\n\t$(DEL_DIR) $(TRANSLATIONS)\n\t$(DEL_FILE) $(SHARE)/*\n\t$(DEL_DIR) $(SHARE)\n\t$(DEL_FILE) $(MANDIR)/gm-assistant.6\n\t$(DEL_FILE) $(CONF)/*\n\t$(DEL_DIR) $(CONF)#' Makefile

echo
echo "********************"
echo "* Ready to compile *"
echo "********************"
echo

# adding the rule for generating the documentation
dox=$(which doxygen)
if [ $? = 0 ]
then
    echo "To generate the documentation, type make doc"
    echo -e "doc:\n\tdoxygen dox.conf" >> Makefile
else
    echo "In order to be able to generate the documentation, you need doxygen"
    echo
fi

echo "To compile, type make"

